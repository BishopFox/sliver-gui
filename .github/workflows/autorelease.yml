name: "Tagged Release"

on:
  push:
    tags: v[0-9]+.[0-9]+.[0-9]+
    branches: master

jobs:

  macos-build:
    runs-on: macos-latest
    timeout-minutes: 90
    if: startsWith( github.ref, 'refs/tags/v')

    env:
      CSC_IDENTITY_AUTO_DISCOVERY: false

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM Install
      run: |
        npm install
        cd ./main/workers/worker
        npm install
        cd ../..
        npm install -g electron-packager
        npm install -g @angular/cli
        npm install -g ngx-i18nsupport
        npm install -g ts-node

    - name: Build MacOS
      run: |
        npm run publish:macos
        ls -lah ./release

    - name: MacOS Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos
        path: |
          ./release/*.zip
          ./release/*.zip.blockmap
          ./release/latest-mac.yml

  linux-build:

    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: startsWith( github.ref, 'refs/tags/v')

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM Install
      run: |
        npm install
        cd ./main/workers/worker
        npm install
        cd ../..
        npm install -g electron-packager
        npm install -g @angular/cli
        npm install -g ngx-i18nsupport
        npm install -g ts-node

    - name: Build Linux AMD64
      run: |
        npm run publish:linux
        ls -lah ./release

    - name: Linux Artifacts AMD64
      uses: actions/upload-artifact@v3
      with:
        name: linux-amd64
        path: |
          ./release/*.AppImage
          ./release/*.blockmap
          ./release/latest-linux.yml


  windows-build:

    runs-on: windows-latest
    timeout-minutes: 90
    if: startsWith( github.ref, 'refs/tags/v')

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM Install
      run: |
        npm install
        cd ./main/workers/worker
        npm install
        cd ../..
        npm install -g electron-packager
        npm install -g @angular/cli
        npm install -g ngx-i18nsupport
        npm install -g ts-node
        
    - name: Build Windows AMD64
      run: |
        npm run publish:windows
        dir ./release

    - name: Windows Artifacts AMD64
      uses: actions/upload-artifact@v3
      with:
        name: windows-amd64
        path: |
          ./release/*.exe
          ./release/*.blockmap
          ./release/latest.yml

  tagged-release:

    needs: [windows-build, linux-build, macos-build]

    name: "Tagged Release"
    if: startsWith( github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
  
    - run: mkdir -p ./release
    - uses: actions/download-artifact@v3
      with:
        path: ./release
    
    - run: ls -lah ./release

    - name: "Publish Release"
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        files: |
          ./release/**
