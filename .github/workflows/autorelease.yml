name: "Tagged Release"

on:
  push:
    tags: v[0-9]+.[0-9]+.[0-9]+
    branches: master

jobs:

  macos-build:
    runs-on: macos-latest
    timeout-minutes: 90
    if: startsWith( github.ref, 'refs/tags/v')
    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Install the Apple signing certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM Install
      run: |
        npm install
        cd ./main/workers/worker
        npm install
        cd ../..
        npm install -g electron-packager
        npm install -g @angular/cli
        npm install -g ngx-i18nsupport
        npm install -g ts-node

    - name: Build MacOS
      env:
        CSC_KEYCHAIN_PATH: $RUNNER_TEMP/app-signing.keychain-db
      run: |
        npm run publish:macos
        ls -lah ./release

    - name: MacOS Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos
        path: |
          ./release/*.zip
          ./release/*.zip.blockmap
          ./release/latest-mac.yml

  linux-build:

    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: startsWith( github.ref, 'refs/tags/v')

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM Install
      run: |
        npm install
        cd ./main/workers/worker
        npm install
        cd ../..
        npm install -g electron-packager
        npm install -g @angular/cli
        npm install -g ngx-i18nsupport
        npm install -g ts-node

    - name: Build Linux AMD64
      run: |
        npm run publish:linux
        ls -lah ./release

    - name: Linux Artifacts AMD64
      uses: actions/upload-artifact@v3
      with:
        name: linux-amd64
        path: |
          ./release/*.AppImage
          ./release/*.blockmap
          ./release/latest-linux.yml


  windows-build:

    runs-on: windows-latest
    timeout-minutes: 90
    if: startsWith( github.ref, 'refs/tags/v')

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM Install
      run: |
        npm install
        cd ./main/workers/worker
        npm install
        cd ../..
        npm install -g electron-packager
        npm install -g @angular/cli
        npm install -g ngx-i18nsupport
        npm install -g ts-node
        
    - name: Build Windows AMD64
      run: |
        npm run publish:windows
        dir ./release

    - name: Windows Artifacts AMD64
      uses: actions/upload-artifact@v3
      with:
        name: windows-amd64
        path: |
          ./release/*.exe
          ./release/*.blockmap
          ./release/latest.yml

  tagged-release:

    needs: [windows-build, linux-build, macos-build]

    name: "Tagged Release"
    if: startsWith( github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
  
    - run: mkdir -p ./release
    - uses: actions/download-artifact@v3
      with:
        path: ./release
    
    - run: ls -lah ./release

    - name: "Publish Release"
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        files: |
          ./release/**
